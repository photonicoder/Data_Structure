Pair sum BInary Tree

Given a binary tree and an integer S, print all the pair of nodes whose sum equals S.
Assume binary tree contains all unique elements.
Note : In a pair, print the smaller element first. Order of different pair doesn't matter.
Input format :
Line 1 : Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 2 : Integer S
Output Format :
Each pair in different line (pair elements separated by space)
Constraints :
1 <= N <= 1000
Sample Input 1:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
15
Sample Output 1:
5 10
6 9
/********************SOLUTIONS*******************************/
 bool isNodePresent(BinaryTreeNode<int>* root, int x) {
   if(root==NULL)
       return 0;
    if(root->data==x)
    {
     root->data=-9999; 
        return 1;
    } 
    else
    {
       int ans=isNodePresent(root->left,x);
        if(ans==1)
            return ans;
         int a=isNodePresent(root->right,x);
        if(a==1)
            return a;
        
    }
    return 0;
}


void helperss(BinaryTreeNode<int> *CN, int sum,BinaryTreeNode<int> *root)
{
    if(CN==NULL)
        return;
    if(CN->data!=-9999)
    {
        int x=sum-CN->data;
        bool i=isNodePresent(root,x);
        if(i==1)
        {
            if(x>CN->data)
            {
                cout<<CN->data<<' '<<x<<endl;
            }
            else
            {
                cout<<x<<' '<<CN->data<<endl;
                
            }
        }
    }
    helperss(CN->left,sum,root);
     helperss(CN->right,sum,root);
}
void nodesSumToS(BinaryTreeNode<int> *root, int sum) {
    helperss(root,sum,root);

}
