Code: Construct BST from a Sorted Array

Given a sorted integer array A of size n which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.
Note : If array size is even, take first mid as root.
Input format :
Line 1 : Integer n (Size of array)
Line 2 : Array elements (separated by space)
Output Format :
BST elements (in pre order traversal, separated by space)
Sample Input :
7
1 2 3 4 5 6 7
Sample Output :
4 2 1 3 6 5 7 
SOLUTIONS
// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
BinaryTreeNode<int>* helper(int *i,int s,int n)
{
    if(s>n)
        return NULL;
    int mid=(s+n)/2;
    int a=i[mid];
    BinaryTreeNode<int>* root= new BinaryTreeNode<int>(a);
    BinaryTreeNode<int>* lefts=helper(i,s,mid-1);
    BinaryTreeNode<int>* rights=helper(i,mid+1,n);
    root->left=lefts;
    root->right=rights;
    return root;
}
BinaryTreeNode<int>* constructTree(int *input, int n) {
   int i=0;
    helper(input,i,n-1);
}
