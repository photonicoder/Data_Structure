Code: Construct Tree from Preorder and Inorder

Given Preorder and Inorder traversal of a binary tree, create the binary tree associated with the traversals.You just need to construct the tree and return the root.
Note: Assume binary tree contains only unique elements.
Input format :

Line 1 : n (Total number of nodes in binary tree)

Line 2 : Pre order traversal

Line 3 : Inorder Traversal

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
12
1 2 3 4 15 5 6 7 8 10 9 12
4 15 3 2 5 1 6 10 8 7 9 12
Sample Output :
1 
2 6 
3 5 7 
4 8 9 
15 10 12
SOLUTIONS

BinaryTreeNode<int>* helper(int *preorder,int *inorder,int preS,int preE,int inS,int inE )
{
    if(preS>preE)
        return NULL;
   
    int lpreS=preS+1;                //left preorder start
    int check=preorder[preS];
                       //i is rootIndex in inorder
    int i=-1;
    for(int j=inS;j<=inE;j++)
    {
        if(inorder[j]==check)
        {
            i=j;
            break;
        }
    }
    int linS=inS;                    //linS: left inorder start
    int linE=i-1;                    //linE: left inorder end
    int lLength=linE-linS;           //lLength: length of left subtree in preorder
    int lpreE=lLength+lpreS;
    int rpreS=lpreE+1;
    int rpreE=preE;
    int rinS=i+1;
    int rinE=inE;
     BinaryTreeNode<int>* root=new BinaryTreeNode<int>(preorder[preS]);
    BinaryTreeNode<int>* leftChild=helper(preorder,inorder,lpreS,lpreE,linS,linE);
    BinaryTreeNode<int>* rightChild=helper(preorder,inorder,rpreS,rpreE,rinS,rinE);
    root->left=leftChild;
    root->right=rightChild;
    return root;
    
    
}

BinaryTreeNode<int>* buildTree(int *preorder, int preLength, int *inorder, int inLength) {
    // Write your code here

    BinaryTreeNode<int>* root=helper(preorder,inorder,0,preLength-1,0,inLength-1);
    return root;
}