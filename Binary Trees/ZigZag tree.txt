ZigZag tree

Given a binary tree, print the zig zag order i.e print level 1 from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.
Input format :

Elements in level order form (separated by space)

(If any node does not have left or right child, take -1 in its place)

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output :
5
10 6
2 3
9
SOLUTIONS
// Following is the Binary Tree node structure
#include <stack>
void zigZagOrder(BinaryTreeNode<int> *root) {
	BinaryTreeNode<int> *front=root;
    stack<BinaryTreeNode<int>*>s1,s2;
    s1.push(root);
    while(s1.size()!=0||s2.size()!=0)
    {
        if(s1.size()!=0)
        {
            while(s1.size()!=0)
            {
                
           		 BinaryTreeNode<int> *fr=s1.top();
                s1.pop();
                cout<<fr->data<<' ';
                if(fr->left!=NULL)
                {
                    s2.push(fr->left);
                }
                if(fr->right!=NULL)
                    s2.push(fr->right);
                
        }
        }
            cout<<endl;
            if(s2.size()!=0)
            {
                
            while(s2.size()!=0)
            {
                
           		 BinaryTreeNode<int> *fr=s2.top();
                s2.pop();
                cout<<fr->data<<' ';
                if(fr->right!=NULL)
                    s1.push(fr->right);
                
                if(fr->left!=NULL)
                	{
                    s1.push(fr->left);
               	 }
                
       			 }
            }
        cout<<endl;
    }

}