Code: Merge Sort

Sort a given linked list using Merge Sort.
You don't need to print the elements, just sort the elements and return the head of updated LL.
Input format :
Linked list elements (separated by space and terminated by -1)
Output format :
Updated LL elements (separated by space)
Constraints :
1 <= Length of LL <= 1000
Sample Input 1 :
1 4 5 2 -1
Sample Output 1 :
1 2 4 5
************************solutions**************************

node* merge(node *head1, node *head2) {
    node *fh=NULL;
    node *ft=NULL;
    if(head1->data < head2->data)
    {
        fh=ft=head1;
        head1=head1->next;
        ft->next=NULL; 
    }
    else
    {
        fh=ft=head2;
        head2=head2->next;
        ft->next=NULL;
        
    }
  while((head1!=NULL)&&(head2!=NULL))
  {
     if(head1->data < head2->data)
    {
        ft->next=head1;
         head1=head1->next;
         ft=ft->next;
        ft->next=NULL;
        
    }
      else 
    {
       ft->next=head2;
         head2=head2->next;
         ft=ft->next;
        ft->next=NULL;
    }
  }
    if(head1!=NULL)
    {
        ft->next=head1;
    }
     if(head2!=NULL)
    {
        ft->next=head2;
    }
    return fh;
    
}

node* mergeSort(node *head) {
  int c=0;
  node *temp=head;
  while(head!=NULL)
  {
    c++;
    head=head->next;
  }
  head=temp;
  if(c==1)
  {
    return head;
  }
  int mid=(c-1)/2;
   node *add=NULL;
  int i=0;
  while(temp!=NULL)
  {
    if(i==mid)
    {
      add=temp->next;
      temp->next=NULL;
      break;
    }
    i++;
    temp=temp->next;
  }
  node *h1=mergeSort(head);
   node *h2=mergeSort(add);

 node *fh= merge(h1,h2);
  return fh;
    
}
