Second Largest Element In Tree

Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Line 1 : Elements in level order form separated by space (as per done in class). Order is -
Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output Format :
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40
SOLUTIONS
#include<stack>
#include<queue>
TreeNode <int>* secondLargest(TreeNode<int> *root) {
    
    queue<TreeNode<int>*> q;
    stack<TreeNode<int>*> s;
    
    q.push(root);
    TreeNode<int> *nxt = new TreeNode<int>(0);
    int low = 0;
    
    while(!q.empty()){
        
        TreeNode<int> *fr = q.front();
        q.pop();
        
        if(fr -> data > nxt -> data){
            s.push(fr);
            nxt = fr;
        }
        
        for(int i = 0; i < fr -> children.size(); i++){
            q.push(fr -> children[i]);
        }
    }
    if(s.empty()|| s.size() == 1){
        return NULL;
    }
    
    s.pop();
    return s.top();
}
/*class Pair{
    
    public:
    TreeNode<int>* max;
    TreeNode<int>* secMax;
    
    
};




Pair helper(TreeNode<int>* root){    

    Pair ans;
    ans.max = root;
    ans.secMax = NULL;
    
    for(int i = 0 ; i < root->children.size(); i++){
        
        Pair temp = helper(root->children[i]);
        
        if(ans.secMax == NULL && temp.secMax == NULL){
            
            if(ans.max->data > temp.max->data ){
                ans.secMax = temp.max;
            }
            else if(ans.max->data < temp.max->data){
                ans.secMax = ans.max;
                ans.max=temp.max;
            }
            else{
             
                Pair res;
                res.max=NULL;
                res.secMax=NULL;
                return res;
                
            }
        }
        
        else if(ans.secMax == NULL || temp.secMax== NULL){
            
            if(ans.secMax == NULL){
                if(ans.max->data > temp.max->data){
                    ans.secMax = temp.max;
                }
                else{
                    TreeNode<int>*x=ans.max;
                    ans.max = temp.max;
                    
                    if(temp.secMax->data > x->data)
                    	ans.secMax = temp.secMax;
                    else{
                        ans.secMax = x;
                    }
                }
            }
            
            else{
                if(ans.max->data < temp.max->data){
                   if(ans.secMax->data > temp.max->data){
                       ans.max = temp.max;
                   }
                    else{
                        TreeNode<int>*x = ans.max;
                        ans.max = temp.max;
                        ans.secMax = x;
                    }
                }
                else{
                    if(temp.max->data > ans.secMax->data){
                        ans.secMax = temp.max;
                    }
                }
            }
            
            
            
        }
        else{
            
            if(ans.max->data > temp.max->data){
                
                if(ans.secMax->data < temp.max->data) 
                    ans.secMax = temp.max;
                    
            }
            else{
                
                
                TreeNode<int>* x = ans.max;
                ans.max = temp.max;
                
                if(x->data > temp.secMax->data)
                    ans.secMax = x;
                else
                    ans.secMax = temp.secMax;
                    
            }
            
        }   
        
        
    }
    
    return ans;

}





TreeNode <int>* secondLargest(TreeNode<int> *root) {
    
    if(root == NULL){
        return NULL;
    }
    
    return (helper(root).secMax);
}